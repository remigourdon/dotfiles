# shellcheck shell=sh

# sudo
alias sudoe='sudo env "PATH=$PATH"'

# Verbose for safety
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# ls
if command -v exa >/dev/null 2>&1 ; then
    alias ls='exa --group-directories-first'
    alias ll='ls -l'
    alias la='ls -la'
else
    alias ls='ls --color=auto --group-directories-first'
    alias ll='ls -lh'
    alias la='ls -lah'
fi
alias l='ls'

# du
command -v dua >/dev/null 2>&1 && alias dui='dua i'

# cd
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias cdtemp="cd $(mktemp -d)"

# stat
alias octal='stat -c "%A %a %n"'

# lfcd
alias cl="lfcd"

# lsblk
alias lk='lsblk'

# grep
alias grep='grep --color=auto'

# diff
alias diff='diff -u --color=auto'

# git
alias g='git'

# jless
alias yless='jless --yaml'

# Activate python virtual environment
venv() {
    if [ $# -eq 1 ] ; then
        . "${1}/venv/bin/activate"
    else
        . venv/bin/activate
    fi
}

# Remove host from SSH keygen know hosts
alias sshr='ssh-keygen -f $HOME/.ssh/known_hosts -R'

# Connect to named tmux session
ssht() {
    if [ $# -eq 1 ] ; then
        ssh -t "${1}" tmux new-session -A -s remi
    elif [ $# -eq 2 ] ; then
        ssh -t "${1}" tmux new-session -A -s "${2}"
    fi
}

# Set date on remote
sshd() { ssh "${1}" sudo date -s @"$(date +%s)" ; }

# neovim
command -v nvim >/dev/null 2>&1 && alias vim='nvim'

# tmux
alias tml='tmux list-sessions'
alias tma='tmux attach-session -t'
alias tmk='tmux kill-session -t'
alias tmn='tmux new-session -A -s'

# udiskie
alias udm='udiskie-mount -r'
alias udu='udiskie-umount --force'
alias udua='udiskie-umount --all'
alias udd='udiskie-umount --force --detach'
alias udda='udiskie-umount --all --detach'

# json
alias json='jq .'
telemjson() {
    jq -sr 'add | group_by(.timestamp) | map( { "timestamp": .[0].timestamp } + reduce .[] as $point ({}; . + { ($point.id): $point.value }) )' "$@"
}
telemcsv() {
    jq -sr 'add | group_by(.timestamp) | map( { "timestamp": .[0].timestamp } + reduce .[] as $point ({}; . + { ($point.id): $point.value }) ) | (.[0] | keys_unsorted), (.[] | to_entries | map(.value)) | @csv' "$@"
}

# xclip
alias clip='echo -n $(fc -l -n -1) | xclip -selection clipboard'

# termtrack (terminal satellite tracker)
alias termtrack='termtrack -figmntxo 1'

# Docker
alias dkps='docker ps --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}\\t{{.RunningFor}}"'
alias dkrm='docker rm --force'
alias dkrmi='docker rmi'
alias dkls='docker container ls'
alias dklsi='docker image ls'
alias dkterm='docker exec --tty --interactive'

# change directory using fasd and fzf
unalias z
unalias zz
z() {
    [ $# -gt 0 ] && fasd_cd -d "$*" && return
    cd "$(fasd -Rdl "$1" | fzf -1 -0 --no-sort +m)"
}

# Display CSV
csv() {
    if [ "$#" -ne 0 ] ; then
        printf '%s\n' "${@}" | xargs -I{} sh -c 'echo "> {}" ; column -t -s, -n {}' | less -F -S -X -K
    else
        column -t -s, -n "$@" | less -F -S -X -K
    fi
}

# Display TSV
tsv() {
    if [ "$#" -ne 0 ] ; then
        printf '%s\n' "${@}" | xargs -I{} sh -c 'echo "> {}" ; column -t -s "$(printf "\t")" -n {}' | less -F -S -X -K
    else
        column -t -s "$(printf '\t')" -n "$@" | less -F -S -X -K
    fi
}

# Create new script
newscript() { [ "$#" -eq 2 ] && touch "${1}" && chmod +x "${1}" && "${EDITOR}" -c "set filetype=$2" "${1}" ; }

# Diff packages and open HTML report
diffpkg () {
    command -v pkgdiff >/dev/null 2>&1 || return 1
    tmp_dir="/tmp/pkgdiff-$(date +%s)"
    report_path="${tmp_dir}/changes_report.html"
    pkgdiff --report-path "${report_path}" "${@}" >/dev/null 2>&1
    echo "Report available at ${report_path}"
    "${BROWSER}" "${report_path}"
}
